---
title: "Visualizing Greenhouse Gas Emissions in the world"
subtitle: "Data Preparation done by *Team Bisque*"
format: html
author: "
  Ryan Chua - 2201421<br>
  Loo Siong Yu - 2201255<br>
  Chua Kang Le - 2201161<br>
  Phua Tiffany - 2202698<br>
  Woon Jun Wei - 2200624<br>
  Ong Si Hui - 2201945"
number-sections: true
toc: true
---

# Introduction

This Quarto document contains the data engineering required to reconstruct and improve the plot made by [World Resources Institute](https://www.wri.org/insights/4-charts-explain-greenhouse-gas-emissions-countries-and-sectors), shown in @fig-oldvs, showing the top 10 Green House Gases (GHG) emitters in the world.

The code below requires the following packages:
```{r}
#| label: library
#| message: false

library(tidyverse)
library(readxl)
library(knitr)
library(gt)
library(dplyr)

# Treemap
library(treemap)
library(treemapify)

# Map
library(sf)
library(tmap)
library(patchwork)
library(scales)

# Graphical Visualization
library(ggplot2)
library(ggrepel)
library(maps)
library(webr) # PieDonut
library(ggiraphExtra) # ggpiedonut
library(moonBook) # ggpiedonut

# To retrieve data from the World Bank Data API
library(wbstats)
```

```{r}
#| label: fig-oldvs
#| echo: false
#| fig.cap: "Visualization of The Top 10 GHG Emitters Contribute Over Two-Thirds of Global Emissions."

include_graphics("images/old_visualization.jpg")
```

# Data Exploration and Preparation

## Source 1 (Main Source) {#source1}

Firstly, lets take a look at the raw data provided from [climatewatchdata.org](https://www.climatewatchdata.org/ghg-emissions), this is the **original** dataset

```{r}
#| label: explore-raw
#| message: false

ghg_raw <- read_csv("data/historical_emissions_orig.csv")
gt_preview(ghg_raw)
```

From the preview, lets check how many unique Countries, Sectors, Gases and Unit are there in the dataset

```{r}
#| label: explore-unique
#| message: false

ghg_raw |>
  summarize(
    n_distinct(Country),
  )
ghg_raw |>
  summarize(
    n_distinct(Sector),
    n_distinct(Gas),
    n_distinct(Unit)
  )
```

Since there is only 1 distinct `Unit` type, we can drop this columns along  as it is not needed for our analysis. The unit MtCOâ‚‚e stands for "million metric tons of carbon dioxide equivalent."

```{r}
ghg_raw <-
  ghg_raw |>
  select(-Unit, -"Data source")

gt_preview(ghg_raw)
# Print size of the dataset
dim(ghg_raw)
```

### Source 1 Cleaning

In the following code, we will wrangle the data to achieve the following:
- Top 10 countries by sorted by total emissions + "Others" where the rest of the countries are grouped under "Others"
- Country + Sector emissions
- Total emissions for each country

```{r}
#| label: emissions_across_country_and_sector
#| warning: false

# Function to process each gas
process_gas <- function(data, gas_name) {
  data |>
    filter(Gas == gas_name) |>
    pivot_longer(cols = 5:ncol(data), names_to = "Year", values_to = "Emissions", values_transform = list(Emissions = as.numeric)) |>
    group_by(ISO, Country, Sector, Year) |>
    summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop")
}

# Process each gas
ghg_gases <- c("CO2", "F-Gas", "N2O", "CH4")
ghg_combined <- map_dfr(ghg_gases, ~ process_gas(ghg_raw, .x))

# Sum up the emissions for each country and sector across all years
ghg_total_sector <- ghg_combined |>
  group_by(ISO, Country, Sector) |>
  summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop") |>
  filter(ISO != "WORLD") |>
  arrange(desc(Emissions))

# Calculate total emissions for each country
country_total_emissions <- ghg_total_sector |>
  group_by(Country) |>
  summarize(Total_Emissions = sum(Emissions), .groups = "drop")

# Save all countries total emissions for later use
all_countries_total_emissions <- country_total_emissions

# Get the top 10 countries by total emissions
top_10_countries <- country_total_emissions |>
  top_n(10, wt = Total_Emissions) |>
  pull(Country)

# Categorize countries as "Top 10" or "Others"
ghg_total_sector <- ghg_total_sector |>
  mutate(Country = if_else(Country %in% top_10_countries, Country, "Others"))

# Sum emissions for each country and sector
ghg_total_sector <- ghg_total_sector |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop")

# Calculate total emissions for each country again after categorization
country_total_emissions <- ghg_total_sector |>
  group_by(Country) |>
  summarize(Total_Emissions = sum(Emissions), .groups = "drop")

# Sort countries by total emissions
ghg_total_sector <- ghg_total_sector |>
  left_join(country_total_emissions, by = "Country") |>
  arrange(desc(Total_Emissions), Country, desc(Emissions)) |>
  mutate(Country = factor(Country, levels = unique(Country))) |>
  select(-Total_Emissions)

# Preview the result (Top 10 countries and sector)
ghg_total_sector |>
  filter(Country != "Others") |>
  gt_preview(10)
```

```{r}
#| label: all-countries-emissions

all_countries_total_emissions |>
  gt_preview(10)
```


## Source 2 (Alternative Source) {#source2}

Next, we will take a look at another source, where the data is slightly more updated, up to 2022. [ourworldindata.org](https://ourworldindata.org/greenhouse-gas-emissions)

```{r}
#| label: explore-raw2
#| message: false

ghg_raw2 <- read_csv("data/historical_emissions_source2.csv")
gt_preview(ghg_raw2)
```

Lets check the unique number of countries as well

```{r}
#| label: explore-unique2
#| message: false

ghg_raw2 |>
  summarize(
    n_distinct(Entity),
  )
```

Since there are more countries covered, we can potentially keep the data from this source and merge it with the first source.

## Source 3 (Alternative Source) {#source3}

Lastly, we will take a look at the third source, where the data has more details

```{r}
#| label: explore-raw3
#| message: false

ghg_raw3 <- read_csv("data/historical_emissions_source3.csv")
gt_preview(ghg_raw3)
```

From the preview we can see that there are many features, lets extract out the relevant ones to preview

```{r}
ghg_raw3 <-
  ghg_raw3 |>
  select(Country, Industry, Gas_Type, F1970:F2022)

gt_preview(ghg_raw3)
```

From this we can tell that this data source not only have the countries, but it is split by the gas type and industry

## Conclusion from exploration

[Source 1](#source1) and [Source 2](#source2) have similar data, both consisting of each country's annual GHG emission. These data are suitable for a simple analysis while [Source 3](#source3) is more detailed, with the data split by industry and gas type.

We can potentially merge Source 1 and 2 together to get a more complete dataset, and then explore Source 3 for more detailed analysis/different angles.


# Data Exploration Visualisations

## Source 1 (Main Source) {#source1_viz}

### Choropleth Map View

World Map view of the all GHG emitters

```{r}
#| label: source1-worldmap

data(World)

# Percentage of country/all countries total emissions
all_countries_total_emissions <- all_countries_total_emissions |>
  mutate(pct_total_emissions = Total_Emissions / sum(Total_Emissions) * 100)

world <-
  World |>
  left_join(all_countries_total_emissions, by = c("name" = "Country")) |>
  select(name, area, iso_a3, Total_Emissions, pct_total_emissions) |>
  mutate(
    country_label = if_else(min_rank(desc(Total_Emissions)) <= 3,
      paste0(
        rank(desc(Total_Emissions)), ". ", iso_a3, "(", round(pct_total_emissions, 2), "%)"
      ),
      ""
    ),
    label_colour = if_else(min_rank(desc(Total_Emissions)) > 2, "black", "white"),
    pct_country_label = if_else(
      min_rank(desc(pct_total_emissions)) <= 10,
      paste0(round(pct_total_emissions, 2), "%"),
      ""
    ),
    pct_label_color = if_else(
      !is.na(pct_total_emissions) & min_rank(desc(pct_total_emissions)) > 2,
      "black",
      "white"
    )
  )
world
```


```{r}
#| label: source1-worldmap-earthplot

# Define the base earth polygon for the map background
earth <- st_polygon(
  x = list(
    cbind(
      c(rep(-180, 181), rep(180, 181), -180), c(-90:90, 90:-90, -90)
    )
  )
) |>
  st_sfc() |>
  st_set_crs(4326) |> # Equirectangular projection
  st_as_sf()
```


```{r}
#| label: source1-worldmap-ggplot

# Define a function for the base map plot
gg_ghg <- function(atm_title) {
  ggplot(world) +
    geom_sf(data = earth, fill = "aliceblue") +
    geom_sf() +
    labs(title = atm_title) +
    coord_sf(crs = "ESRI:54035") +
    theme_void() +
    theme(
      legend.margin = margin(3, 0, 0, 0), # Increase margin above legend
      legend.key.width = unit(1.2, "cm"),
      legend.key.height = unit(0.5, "cm"),
      legend.frame = element_rect(), # Add a frame around the colorbar
      legend.position = "top",
      plot.title = element_text(face = "bold", hjust = 0.5, size = 10)
    )
}
```


```{r}
#| label: fig-source1-worldmap-plot
#| fig.cap: "Choropleth map of GHG emissions by country."

gg_ghg_total_emissions <- gg_ghg("Top GHG Emitters (as % of World Total)") +
  aes(fill = Total_Emissions) +
  labs(fill = NULL, caption = "Source: World Resources Institute") +
  scale_fill_fermenter(
    palette = "OrRd",
    direction = 1,
    labels = label_number(
      scale = 1e-6,
      suffix = "M"
    )
  ) +
  geom_sf_text(
    aes(label = country_label, color = label_colour),
    data = world,
    size = 1.25
  ) +
  scale_color_identity()

gg_ghg_pct <-
  gg_ghg("Percentage of Total GHG Emissions") +
  aes(fill = pct_total_emissions) +
  labs(fill = NULL, caption = "Source: World Resources Institute") +
  scale_fill_distiller(palette = "Reds", direction = 1) +
  geom_sf_text(
    aes(label = pct_country_label, color = pct_label_color),
    data = world,
    size = 2
  ) +
  scale_color_identity()

gg_ghg_total_emissions
```

```{r}
#| label: fig-source1-worldmap-plot-pct
#| fig.cap: "Choropleth map of GHG emissions by country (Percentage of total emissions)."

gg_ghg_pct
```

@fig-source1-worldmap-plot shows the total GHG emissions and @fig-source1-worldmap-plot-pct shows the percentage of total GHG emissions for each country. The top 10 countries with the highest total emissions are labeled with their names, while the top 10 countries with the highest percentage of total emissions are labeled with their percentage values.

**Advantage**: The choropleth map is an effective way to visualize the distribution of GHG emissions across countries. It provides a clear visual representation of the top emitters and their relative contributions to global emissions. The use of color gradients helps to highlight the differences in emissions levels, making it easy to identify the countries with the highest emissions.

**Disadvantage**: The choropleth map may not be suitable for comparing emissions across countries with vastly different population sizes or land areas. The map does not account for population density or per capita emissions, which can provide a more accurate representation of a country's contribution to global emissions. Additionally, the map may not be as effective for visualizing changes in emissions over time, as it only shows a snapshot of emissions for a single year or the total emissions up to that year.


### Pie Charts

Pie Charts are used to depict the top 10 countries and sectors by emissions.

```{r}
#| label: pie-chart-function

# Function to create pie chart
plot_pie_chart <- function(data, fill_var, title, subtitle) {
  data <- data |>
    group_by(.data[[fill_var]]) |>
    summarize(Emissions = sum(Emissions)) |>
    mutate(
      fraction = Emissions / sum(Emissions),
      ymax = cumsum(fraction),
      ymin = c(0, head(ymax, n = -1)),
      label = as.character(.data[[fill_var]])
    )

  ggplot(data, aes(ymax = ymax, ymin = ymin, xmax = 4, xmin = 3, fill = .data[[fill_var]])) +
    geom_rect() +
    geom_text_repel(
      aes(y = (ymin + ymax) / 2, label = label, x = 3.5),
      xlim = c(5, NA),
      nudge_x = 1,
      show.legend = FALSE
    ) +
    coord_polar(theta = "y") +
    theme_void() +
    theme(
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5),
      legend.position = "none" # Remove legend
    ) +
    labs(
      title = title,
      subtitle = subtitle,
      fill = fill_var,
      caption = "Source: World Resources Institute"
    ) +
    scale_fill_brewer(palette = "Set3")
}
```

```{r}
#| label: source1-piecharts

# Pie chart of the top 10 countries + Others
source_1_pie_country <- plot_pie_chart(
  data = ghg_total_sector,
  fill_var = "Country",
  title = "Top 10 GHG Emitters",
  subtitle = "Emissions by Country"
)

# Pie chart of the top 10 sectors
source_1_pie_sector <- plot_pie_chart(
  data = ghg_total_sector,
  fill_var = "Sector",
  title = "Top 10 GHG Emitters",
  subtitle = "Emissions by Sector"
)
```

```{r}
#| label: source1-pie-country-plot
#| fig.cap: "Pie Charts of the top 10 countries and sectors by emissions."
#| fig.width: 10
#| fig.height: 10

source_1_pie_country
```

```{r}
#| label: source1-pie-sector-plot
#| fig.cap: "Pie Charts of the top 10 countries and sectors by emissions."
#| fig.width: 10
#| fig.height: 10

source_1_pie_sector
```


The Pie Charts above show the distribution of emissions by country and sector. The top 10 countries and sectors are represented in the pie charts, with each slice of the pie corresponding to the emissions of a particular country or sector. The size of each slice is proportional to the emissions of the corresponding country or sector, allowing for easy comparison of emissions levels.

**Advantage**: Pie charts are an effective way to visualize the distribution of emissions by country and sector. They provide a clear visual representation of the relative contributions of each country and sector to total emissions. The use of color coding helps to differentiate between countries and sectors, making it easy to identify the top emitters.

**Disadvantage**: Pie charts may not be suitable for comparing emissions across a large number of countries or sectors, as the slices can become too small to distinguish. Additionally, pie charts do not provide a direct comparison of emissions levels between countries or sectors, as the size of each slice is relative to the total emissions. This can make it difficult to accurately assess the differences in emissions levels between countries or sectors.


### Stacked Bar Chart

Stacked bar chart of the top 10 countries emissions by sector

```{r}
#| label: source1-stackedbar-function

# Function to create a stacked bar chart
plot_stacked_bar <- function(data, x_var, title, subtitle) {
  ggplot(data, aes(x = .data[[x_var]], y = Emissions, fill = Sector)) +
    geom_bar(stat = "identity") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      plot.title = element_text(hjust = 0.5),
      plot.subtitle = element_text(hjust = 0.5),
      plot.margin = margin(20, 20, 20, 20),
      legend.position = "bottom"
    ) +
    labs(
      title = title,
      subtitle = subtitle,
      x = x_var,
      y = "Emissions (MtCOâ‚‚e)",
      fill = "Sector"
    )
}
```


```{r}
#| label: fig-source1-stackedbar
#| fig.cap: "Stacked bar chart of emissions by country."

# Stacked bar chart for emissions by country
source1_stackedbar <- plot_stacked_bar(
  data = ghg_total_sector,
  x_var = "Country",
  title = "Top 10 GHG Emitters",
  subtitle = "Emissions by Sector"
)

source1_stackedbar
```

Stacked Barchart (@fig-source1-stackedbar) shows the emissions of the top 10 countries by sector. Each bar represents the total emissions of a country, with the different colors representing the emissions from different sectors. The stacked bar chart allows for easy comparison of emissions levels between countries and sectors, making it easy to identify the top emitters and the sectors contributing the most to emissions.


```{r}
#| label: fig-stacked-barchart-2
#| fig.cap: "Stacked bar chart of emissions Top10 Vs Remaining 184 countries."

# Summarize the emissions of the top 10 countries
top_10_countries <- ghg_total_sector |>
  group_by(Country) |>
  summarize(Total_Emissions = sum(Emissions)) |>
  filter(Country != "Others") |>
  top_n(10, Total_Emissions)

# Create a new data frame for the top 10 countries
top_10_data <- ghg_total_sector |>
  filter(Country %in% top_10_countries$Country) |>
  group_by(Sector) |>
  summarize(Emissions = sum(Emissions)) |>
  mutate(Country = "Top 10")

# Create a new data frame for the "Others" countries
others_data <- ghg_total_sector |>
  filter(!Country %in% top_10_countries$Country) |>
  group_by(Sector) |>
  summarize(Emissions = sum(Emissions)) |>
  mutate(Country = "Remaining 184 Countries")

# Combine the data frames
final_data <- bind_rows(top_10_data, others_data)

# Stacked bar chart for top 10 countries vs remaining 184 countries
stacked_barchart_2 <- plot_stacked_bar(
  data = final_data,
  x_var = "Country",
  title = "Top 10 GHG Emitters vs Remaining 184 Countries",
  subtitle = "Emissions by Sector"
)

stacked_barchart_2
```

The Stacked Barchart (@fig-stacked-barchart-2) shows the emissions of the top 10 countries and the remaining 184 countries by sector. Each bar represents the total emissions of a group of countries, with the different colors representing the emissions from different sectors. The stacked bar chart allows for easy comparison of emissions levels between the top 10 countries and the remaining countries, making it easy to identify the top emitters and the sectors contributing the most to emissions.

### Donut Charts

The original Visualization uses a Donut chart to show the top 10 countries and sectors by emissions. We will replicate this visualization using the `PieDonut` function from the `webr` package.

Donut chart of the top 10 countries and top 3 sectors by emissions

```{r}
#| label: fig-source1-donut
#| fig.cap: "Donut chart of the top 10 countries and sectors by emissions."
#| fig.width: 9
#| fig.height: 5

# Plot the donut chart of the top 10 countries and top 3 sectors within each country
ghg_total_countries <- ghg_total_sector |>
  mutate(Country = as.character(Country)) |>
  filter(Country != "Others") |>
  group_by(Country) |>
  top_n(3, Emissions) |>
  ungroup()

PieDonut(
  ghg_total_countries,
  aes(x = Country, y = Sector, count = Emissions),
  showPieName = FALSE,
  labelposition = 1,
  title = "Top 10 GHG Emitters",
  pieLabelSize = 2,
  donutLabelSize = 3,
  showRatioThreshold = 0.001,
  showRatioPie = FALSE,
  showRatioDonut = FALSE,
  explodeDonut = TRUE
)

# Switch Russia Energy and Electricity/Heat rows
# Replace "Land-Use Change and Forestry" in Sector column with "LUCF"
# Above are done so to fit the labels into the chart
ghg_total_countries_gg <- ghg_total_countries |>
  slice(c(1:9, 11, 10, 12:n())) |>
  mutate(Sector = ifelse(Sector == "Land-Use Change and Forestry", "LUCF", Sector))

ggPieDonut(
  ghg_total_countries_gg,
  aes(pies = Country, donuts = Sector, count = Emissions),
  showRatioPie = FALSE,
  showRatioDonut = FALSE,
  title = "Top 10 GHG Emitters",
  labelposition = 1
) +
  geom_col(aes(x = -1, y = 0))
```

Taking into consideration the population of each country

```{r}
#| label: source1-donut-with-population-data

# Retrieving the top 10 countries ISO
top_10_countries_with_iso <- top_10_countries |>
  mutate(Country = as.character(Country)) |>
  left_join(ghg_combined |>
    select(ISO, Country) |>
    distinct(), by = "Country")

countries <- top_10_countries_with_iso$ISO

# Get the population data from the World Bank API
population_data <- wb_data("SP.POP.TOTL", country = countries, start_date = 1990, end_date = 2021) |>
  rename(population = SP.POP.TOTL) |>
  select(iso3c, population) |>
  group_by(iso3c) |>
  summarize(avg_population = mean(population))

# Top 3 sectors in each country by Emissions data
ghg_total_sectors <- ghg_combined |>
  group_by(ISO, Country, Sector) |>
  summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop") |>
  group_by(ISO, Country) |>
  top_n(3, Emissions) |>
  arrange(desc(Emissions)) |>
  ungroup()

# Adding population data before filtering top 10 countries per capita
ghg_total_countries_pop <- ghg_combined |>
  filter(ISO != "WORLD") |>
  left_join(population_data, by = c("ISO" = "iso3c")) |>
  group_by(ISO, Country, avg_population) |>
  summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop") |>
  mutate(Emissions_per_capita_country = Emissions / avg_population) |>
  arrange(desc(Emissions_per_capita_country)) |>
  slice(1:10) |>
  select(ISO, avg_population, Emissions_per_capita_country) |>
  left_join(ghg_total_sectors, by = "ISO") |>
  mutate(Emissions_per_capita = Emissions / avg_population)
```


```{r}
#| label: fig-source1-donut-population

PieDonut(
  ghg_total_countries_pop,
  aes(x = Country, y = Sector, count = Emissions_per_capita),
  showPieName = FALSE,
  labelposition = 1,
  title = "Top 10 GHG Emitters per capita",
  pieLabelSize = 4,
  donutLabelSize = 3,
  showRatioThreshold = 0.001,
  showRatioPie = FALSE,
  showRatioDonut = FALSE,
  explodeDonut = TRUE
)
```


```{r}
#| label: fig-circular_bar_chart
#| message: false

# Circular bar chart of the top 10 countries
ggplot(ghg_total_countries, aes(x = reorder(Country, Emissions), y = Emissions, fill = Sector)) +
  geom_bar(stat = "identity", width = 1, color = "white") +
  coord_polar(start = 0) +
  ylim(-max(ghg_total_countries$Emissions) * 1.2, max(ghg_total_countries$Emissions) * 2) +
  theme_void() +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.margin = unit(rep(0.1, 4), "cm"),
    legend.position = "right"
  ) +
  geom_text_repel(aes(label = Emissions), position = position_stack(vjust = 0.5), size = 2) +
  geom_text(aes(x = Country, y = 0, label = Country), hjust = 0.5, size = 2.5, angle = 25) +
  labs(
    title = "Top 10 GHG Emitters",
    fill = "Sector"
  )
```
**Advantage**: Circular Bar Chart add a little customization from the basic bar chart by making it circular but just like a bar chart, it is used for ranking. It is easy to see the ranking between each variables by looking at how long each bar is. Compared to a regular bar chart where each bar are placed side by side, circular bar chart placed each bar in a circular manner, making it a circular wide point of view to look at.
<br>
**Disadvantage**: It can be observed that circular bar chart looks similar to a pie chart/donut chart and if more variables are added into the chart like eg. sector of a country, it will work like a stacked pie chart/donut chart. In order to achieve the circular bar chart, the inner circle have to be removed by using `ylim`. If there are a lot of information to be displayed from a data set, the circular bar chart will look very cluttered and hard to read the information.

### Line Graph

Let's compare the top 10 countries with the other countries
```{r}
#| label: fig-source1-line-others

# Line graph of the top 10 countries vs "Others"

countries_top_10 <- top_10_countries_with_iso$ISO
ghg_top_10_vs_others <- ghg_raw |>
  filter(ISO != "WORLD") |>
  filter(!if_any(everything(), ~ grepl("N/A", .))) |>
  mutate(Country = ifelse(ISO %in% countries_top_10, "Top 10", "184 Remaining Countries")) |>
  select(-Sector, -Gas, -ISO) |>
  mutate(across(-Country, as.numeric)) |>
  group_by(Country) |>
  summarize(across(everything(), \(x) sum(x, na.rm = TRUE)), .groups = "drop") |>
  pivot_longer(cols = -Country, names_to = "Year", values_to = "Emissions")

ggplot(ghg_top_10_vs_others, aes(x = Year, y = Emissions, group = Country, color = Country)) +
  geom_line(linewidth = 2) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    plot.margin = margin(20, 20, 20, 20),
    legend.position = "bottom",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  ) +
  labs(
    title = "Top 10 GHG Emitters vs Remaining 184 Countries",
    subtitle = "Emissions Over the Years",
    x = "Year",
    y = "Emissions (MtCO2e)",
    color = "Country"
  )

gt_preview(ghg_top_10_vs_others)
```

### Treemap

```{r}
#| label: fig-source1-treemap
#| fig.cap: "Treemap of the top 10 countries and sectors by emissions."

# Remove negative Emissions (We don't want to show negative emissions)
treemap_data <-
  ghg_total_sector |>
  filter(Emissions >= 0)

# Select only the top 3 sectors for each country, group the rest under "Other Sectors"
treemap_data <-
  treemap_data |>
  group_by(Country) |>
  top_n(4, Emissions) |>
  ungroup() |>
  mutate(Sector = if_else(row_number() == 5, "Other Sector", Sector))

# Combine the emissions of the "Other Sectors" for each country
treemap_data <-
  treemap_data |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop") |>
  ungroup() |>
  group_by(Country) |>
  mutate(Sector = if_else(Sector == "Other Sector", "Other Sectors", Sector)) |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop")

treemap_data |>
  gt_preview(10)

# Treemap of the top 10 countries and sectors + Others (Showing the emissions by sector)
treemap(
  dtf = treemap_data,
  index = c("Country", "Sector"),
  vSize = "Emissions",
  vColor = "Emissions",
  draw = TRUE,
  title = "Top 10 GHG Emitters",
  fontsize.labels = c(10, 8),
  # inflate.labels = TRUE,
  # fontcolor.labels = c("black", "white"),
  fontface.labels = c(2, 1),
  fontsize.title = 3,  # Adjusted font size for title
  align.labels = list(c("center", "center"), c("center", "center")),
  border.col = "black",
  border.lwds = 0.5,  # Adjusted border line width
  aspRatio = NA,
  type = "value",
  palette = "Reds",
  fontsize.legend = 5,  # Adjusted font size for legend
  title.legend = "Emissions (MtCO2e)",  # Added legend title
  format.legend = list(
    # Show in million metric tons
    big.mark = ",",
    scientific = FALSE
    
  )
)

## Treemapify
# Treemap with Country as the main group, by emissions, show sector for each country
ggplot(treemap_data, aes(area = Emissions, fill = Sector, subgroup = Country)) +
  geom_treemap() +
  geom_treemap_text(
    aes(label = paste0(Sector, "\n", round(Emissions, 2), " MtCO2e")),
    reflow = TRUE,
    color = "white",
    place = "centre",
    grow = TRUE
  ) +
  geom_treemap_subgroup_text(
    place = "centre",
    grow = TRUE
  ) +
  geom_treemap_subgroup_border() +
  scale_fill_brewer(palette = "Set3") +
  theme_void() +
  theme(legend.position = "none") +
  labs(
    title = "Top 10 GHG Emitters",
    fill = "Sector",
    caption = "Source: World Resources Institute",
  )
```


## Source 4

Lets compare that against Energy generation type per country
[Source](https://climatedata.imf.org/datasets/0bfab7fb7e0e4050b82bba40cd7a1bd5/explore)

First, we format the data into each country and their energy generation per year

```{r}
#| label: source4-raw
#| message: false

expenditure <- read_csv("data/energy_transition.csv")

expenditure <-
  expenditure |>
  filter(Indicator %in% "Electricity Generation") |>
  mutate(across(F2000:F2022, ~ replace_na(., 0))) |>
  group_by(Country, ISO3) |>
  summarize(across(F2000:F2021, sum), .groups = "drop")

gt_preview(expenditure)
```

Then we plot the data

```{r}
#| label: source4-line1
#| message: false

expenditure <-
  expenditure |>
  filter(ISO3 %in% c("CHN", "USA", "IND")) |>
  rename_with(~ str_replace(., "F", "")) |>
  pivot_longer(cols = 3:24, names_to = "Year", values_to = "Energy")

expenditure$Year <- as.numeric(as.character(expenditure$Year))
gt_preview(expenditure)


ggplot(expenditure, aes(x = Year, y = Energy, color = Country)) +
  geom_line(linewidth = 1) + # Line graph
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(hjust = 0.5),
    plot.margin = margin(20, 20, 20, 20),
    legend.position = "bottom"
  ) +
  labs(
    title = "Energy Generated Over the Years",
    subtitle = "For Top 3 Emitting Countries",
    x = "Year",
    y = "Energy Generated (GWh)",
    color = "Country",
    shape = "Country"
  )
```
