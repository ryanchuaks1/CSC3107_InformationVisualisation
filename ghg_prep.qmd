---
title: "Visualizing Greenhouse Gas Emissions in the world"
subtitle: "Data Preparation done by *Team Bisque*"
format: html
author: "
  Ryan Chua - 2201421<br>
  Loo Siong Yu - 2201255<br>
  Chua Kang Le - 2201161<br>
  Phua Tiffany - 2202698<br>
  Woon Jun Wei - 2200624<br>
  Ong Si Hui - 2201945"
number-sections: true
toc: true
bibliography: references.bib
---

# Introduction

This Quarto document contains the data engineering required to reconstruct and improve the plot made by [World Resources Institute](https://www.wri.org/insights/4-charts-explain-greenhouse-gas-emissions-countries-and-sectors) @ghg_data, shown in @fig-oldvs, showing the top 10 Green House Gases (GHG) emitters in the world.

The code below requires the following packages:

```{r}
#| label: library
#| message: false
#| warning: false

# Data Manipulation
library(tidyverse)
library(readxl)
library(knitr)
library(gt)
library(dplyr)

# Treemap
library(treemap)
library(treemapify)
```

```{r}
#| label: fig-oldvs
#| echo: false
#| fig.cap: "Visualization of The Top 10 GHG Emitters Contribute Over Two-Thirds of Global Emissions."

include_graphics("images/old_visualization.jpg")
```

# Data Exploration

Firstly, lets take a look at the raw data provided from @ghg_wri, this is the **original** dataset

```{r}
#| label: explore-raw
#| message: false

ghg_raw <- read_csv("data/historical_emissions_orig.csv")
gt_preview(ghg_raw)
```

From the preview, lets check how many unique Countries, Sectors, Gases and Unit are there in the dataset

```{r}
#| label: explore-unique
#| message: false

ghg_raw |>
  summarize(
    n_distinct(Country),
  )
ghg_raw |>
  summarize(
    n_distinct(Sector),
    n_distinct(Gas),
    n_distinct(Unit)
  )
```

Since there is only 1 distinct `Unit` type, we can drop this column as it is not needed for our analysis. The unit MtCOâ‚‚e stands for "million metric tons of carbon dioxide equivalent." This also tells us that we do not need to scale the gas types as they are already in the same unit.

```{r}
ghg_raw <-
  ghg_raw |>
  select(-Unit, -"Data source")

gt_preview(ghg_raw)
# Print size of the Data set
dim(ghg_raw)
```

# Data Cleaning and Preparation for Visualization

In the following code, we will process the greenhouse gas (GHG) emissions data to achieve the following goals:

1. Identify the top 10 countries by total emissions and group the rest of the countries under "Others".
2. Summarize emissions by country and sector.
3. Prepare the data for treemap visualization by categorizing sectors and renaming specific countries.

```{r}
#| label: emissions_across_country_and_sector
#| warning: false

# Function to process each gas
process_gas <- function(data, gas_name) {
  data |>
    filter(Gas == gas_name) |>
    pivot_longer(cols = 5:ncol(data), names_to = "Year", values_to = "Emissions", values_transform = list(Emissions = as.numeric)) |>
    group_by(ISO, Country, Sector, Year) |>
    summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop")
}

# Process each gas and combine results
ghg_gases <- c("CO2", "F-Gas", "N2O", "CH4")
ghg_combined <- map_dfr(ghg_gases, ~ process_gas(ghg_raw, .x))

# Sum up the emissions for each country and sector across all years
ghg_total_sector <- ghg_combined |>
  group_by(ISO, Country, Sector) |>
  summarize(Emissions = sum(Emissions, na.rm = TRUE), .groups = "drop") |>
  filter(ISO != "WORLD") |>
  arrange(desc(Emissions))

# Calculate total emissions for each country
country_total_emissions <- ghg_total_sector |>
  group_by(Country) |>
  summarize(Total_Emissions = sum(Emissions), .groups = "drop")

# Get the top 10 countries by total emissions
top_10_countries <- country_total_emissions |>
  top_n(10, wt = Total_Emissions) |>
  pull(Country)

# Categorize countries as "Top 10" or "Others"
ghg_total_sector <- ghg_total_sector |>
  mutate(Country = if_else(Country %in% top_10_countries, Country, "Others"))

# Sum emissions for each country and sector
ghg_total_sector <- ghg_total_sector |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop")

# Calculate total emissions for each country again after categorization
country_total_emissions <- ghg_total_sector |>
  group_by(Country) |>
  summarize(Total_Emissions = sum(Emissions), .groups = "drop")

# Sort countries by total emissions
ghg_total_sector <- ghg_total_sector |>
  left_join(country_total_emissions, by = "Country") |>
  arrange(desc(Total_Emissions), Country, desc(Emissions)) |>
  mutate(Country = factor(Country, levels = unique(Country))) |>
  select(-Total_Emissions)
```

In this block, we process the emissions data for each type of greenhouse gas, sum up emissions across years, and categorize countries into "Top 10" and "Others". The final output `ghg_total_sector` contains emissions data grouped by country and sector.

```{r}
#| label: emissions_across_country_and_sector_preview

# Preview the result (Top 10 countries and sector)
ghg_total_sector |>
  filter(Country != "Others") |>
  gt_preview(10)
```

This block previews the emissions data for the top 10 countries, showing emissions by sector.

```{r}
#| label: fig-source1-treemap-data

# Remove negative Emissions (We don't want to show negative emissions)
treemap_data <-
  ghg_total_sector |>
  filter(Emissions >= 0)

# Select only the specified sectors and group the rest under "Other Sectors"
treemap_data <-
  treemap_data |>
  group_by(Country) |>
  mutate(Sector = if_else(
    Sector %in% c("Energy", "Electricity/Heat", "Agriculture", "Transportation", "Manufacturing/Construction"),
    Sector,
    "Other Sectors"
  )) |>
  ungroup()

# Combine all sectors in "Others" Country into "Other Sectors"
treemap_data <-
  treemap_data |>
  mutate(Sector = if_else(Country == "Others", "Other Sectors", Sector))

# Combine the emissions of the "Other Sector" for each country and rename sectors appropriately
treemap_data <-
  treemap_data |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop") |>
  mutate(Sector = if_else(Country == "Others" & Sector == "Other Sectors", "Other Country", Sector))

# Rename "European Union (27)" to "EU27" and "Others" to "184 Remaining Countries"
treemap_data <-
  treemap_data |>
  mutate(Country = case_when(
    Country == "European Union (27)" ~ "EU27",
    Country == "Others" ~ "184 Remaining Countries",
    TRUE ~ Country
  ))

# Re-group and re-summarize to ensure data consistency
treemap_data <-
  treemap_data |>
  group_by(Country, Sector) |>
  summarize(Emissions = sum(Emissions), .groups = "drop")

# Modify the factors to order it in this order:
# Energy, Electricity/Heat, Agriculture, Transportation, Manufacturing/Construction, Other Sectors
treemap_data <-
  treemap_data |>
  mutate(
    Sector = factor(Sector,
      levels = c(
        "Energy",
        "Electricity/Heat",
        "Agriculture",
        "Transportation",
        "Manufacturing/Construction",
        "Other Sectors",
        "Other Country"
      ),
      ordered = TRUE
    )
  )

# Preview the data
treemap_data |>
  gt_preview(10)
```

In this block, we prepare the data for treemap visualization:

1. Remove negative emissions values.
2. Group less significant sectors into "Other Sectors".
3. Combine sectors for the "Others" country into a single "Other Sectors" category.
4. Rename specific countries for clarity.
5. Reorder sectors for better visualization.

This processed dataset `treemap_data` is now ready for creating a treemap visualization, displaying emissions by country and sector.



# Conclusion from exploration

[Source 1](#source1) consists of each country's annual GHG emission, industry and gas type. These data are suitable for a complex analysis and the making of a beautiful chart. However, the data is not suitable for a treemap visualization as it contains too many sectors and countries. We have processed the data to group the sectors and countries into more manageable categories for the treemap visualization.

Our goal is to find potential visualizations that can be used to represent the data more effectively compared to @fig-oldvs, discover new potential angles and insights that can be derived from the data.